generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

generator tsnode {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  checkIns      CheckIn[]
  happyMoments  HappyMoment[]
  pomodoroSessions PomodoroSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model CheckIn {
  id          String      @id @default(cuid())
  userId      String?
  window      String
  physical17  Int
  cognitive17 Int
  mood17      Int?
  stress17    Int?
  note        String
  tsUtc       DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries TimeEntry[]
}

model TimeCategory {
  id          String      @id
  label       String
  icon        String
  isCustom    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  timeEntries TimeEntry[]
}

model TimeEntry {
  id         String       @id @default(cuid())
  hours      Int
  checkInId  String
  categoryId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  category   TimeCategory @relation(fields: [categoryId], references: [id])
  checkIn    CheckIn      @relation(fields: [checkInId], references: [id])
}

model HappyMoment {
  id        String   @id @default(cuid())
  userId    String
  tsUtc     DateTime
  note      String?
  mediaRef  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PomodoroSession {
  id        String   @id @default(cuid())
  userId    String
  duration  Int      // Duration in minutes
  tsUtc     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
